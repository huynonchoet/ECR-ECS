name: Build & Deploy Laravel 11
on:
  push:
    branches:
      - feature/setup_ci_cd

permissions:
  id-token: write
  contents: read

jobs:
  build_docker_images:
    name: Build image php & nginx
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - docker_file: ./docker/ecs/php/Dockerfile
            image_name: appimage
            repo_name: laravel-app
            image_tag: 011224898113.dkr.ecr.ap-southeast-1.amazonaws.com/laravel-app:latest
            api: true
          - docker_file: ./docker/ecs/nginx/Dockerfile
            image_name: webimage
            repo_name: laravel-web
            image_tag: 011224898113.dkr.ecr.ap-southeast-1.amazonaws.com/laravel-web:latest

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::011224898113:role/TestOIDC
      #     role-session-name: samplerolesession
      #     aws-region: ap-southeast-1

      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Build and push
      #   id: build-image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: ${{matrix.docker_file}}
      #     push: true
      #     tags: ${{matrix.image_tag}}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - name: Set variables
        id: set-variables
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY: abc
          ECR_REPOSITORY: ${{matrix.repo_name}}
          IMAGE_TAG: latest

        run: |
          echo "image_name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Print image name
      #   run: |
      #     echo ${{ steps.set-variables.outputs.image }}
    outputs:
      matrix_output : ${{ steps.set-variables.outputs.image_name }}


  print_all_images:
    needs: build_docker_images

    name: Modify task definition and deploy to ecs
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: print all images
        run: |
          echo "${{ toJSON(needs) }}" | jq -r '.["build_docker_images"][] | "Output: \(.outputs.matrix_output)"'

  # deploy_ecs:
  #   needs: build_docker_images

  #   name: Modify task definition and deploy to ecs
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: checkout code
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::011224898113:role/TestOIDC
  #         role-session-name: samplerolesession
  #         aws-region: ap-southeast-1

  #     - name: Download task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition ${{ secrets.ECS_CONTAINER_DEFINITION }} \
  #         --query taskDefinition > task-definition.json

  #     - name: Fill in the new app image ID in the Amazon ECS task definition
  #       id: app-task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: ${{ secrets.ECS_APP_CONTAINER_NAME }}
  #         image: ${{ steps.build-image.outputs.appimage }}

  #     - name: Fill in the new nginx image ID in the Amazon ECS task definition
  #       id: web-task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.app-task-def.outputs.task-definition }}
  #         container-name: ${{ secrets.ECS_NGINX_CONTAINER_NAME }}
  #         image: ${{ steps.build-image.outputs.webimage }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.web-task-def.outputs.task-definition }}
      #     service: testserviceelb
      #     cluster: testelb
      #     wait-for-service-stability: true
